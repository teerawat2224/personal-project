// Prisma schema definition

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enum definitions
enum Role {
  USER
  ADMIN
  MODERATOR
}

enum LeaveStatus {
  PENDING
  APPROVED
  INMODERATION
  REJECTED
}

enum LeaveType {
  SICK_LEAVE // ลาป่วย
  ANNUAL_LEAVE // ลาพักร้อน
  EMERGENCY_LEAVE // ลาฉุกเฉิน
  MATERNITY_LEAVE // ลาคลอด
}

// User model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  phone         String?
  password      String?
  leaves        Leave[]   @relation("UserLeaves") // ความสัมพันธ์กับ Leave
  balances      Balances[] @relation("UserBalances") // ความสัมพันธ์กับ Balances
  notifications  Notification[] @relation("UserNotifications") // ความสัมพันธ์กับ Notification
}

// Leave model
model Leave {
  id            String          @id @default(cuid())
  type          LeaveType      // ใช้ LeaveType enum แทน
  year          String          @default("")
  startDate     DateTime
  endDate       DateTime
  days          Int
  userId        String          // การเชื่อมโยงกับผู้ใช้
  user          User            @relation("UserLeaves", fields: [userId], references: [id]) // ความสัมพันธ์กับ User
  userName      String
  userNote      String?
  tasksLink     String?
  userEmail     String
  status        LeaveStatus     @default(PENDING)
  moderator     String?
  moderatorNote String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  notifications  Notification[] @relation("LeaveNotifications") // ความสัมพันธ์กับ Notification
}

// Balances model
model Balances {
  id                 String   @id @default(cuid())
  year               String
  annualCredit       Int?     @default(0)
  annualUsed         Int?     @default(0)
  annualAvailable    Int?     @default(0)
  healthCredit       Int?     @default(0)
  healthUsed         Int?     @default(0)
  healthAvailable    Int?     @default(0)
  maternityCredit    Int?     @default(0)
  maternityUsed      Int?     @default(0)
  maternityAvailable  Int?     @default(0)
  familyCredit       Int?     @default(0)
  familyUsed         Int?     @default(0)
  familyAvailable    Int?     @default(0)
  unpaidUsed         Int?     @default(0)
  userId             String
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserBalances")

  @@unique([userId, year]) 
}

// Notification model
model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  userId    String
  user      User     @relation(fields: [userId], references: [id], name: "UserNotifications")
  leaveId   String?  // ใช้ String? ถ้าต้องการให้เป็น null ได้
  leave     Leave?   @relation(fields: [leaveId], references: [id], name: "LeaveNotifications") // เพิ่มชื่อความสัมพันธ์
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

// Events model
model Events {
  id          String   @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime?
}
